import Test.RAssert;

function<int> testMain(RAssert assert)
{
    assert.Equal(type(int), statictype(3));
    assert.Equal(type(int), statictype(2 + 2));
    assert.Equal(type(int), statictype(3 * 2 + 6));

    let int i = 4;
    assert.Equal(type(int), statictype(i));
    assert.Equal(type(int), statictype(i + 2));
    assert.Equal(type(int), statictype(i + 2 * 3));

    let TestClass tc;
    assert.Equal(type(TestClass), TestClass);
    assert.Equal(type(TestClass), statictype(tc));
    assert.Equal(type(TestClass), statictype(TestClass()));
    assert.Equal(type(int), statictype(tc.field));
    assert.Equal(type(int), statictype(tc.postIncrement()));

    let ? var;
    assert.Equal(null, statictype(var));
    assert.Equal(type(?), statictype(var));

    let bool b = true;
    assert.Equal(type(bool), statictype(true));
    assert.Equal(type(bool), statictype(false));
    assert.Equal(type(bool), statictype(b));
    assert.Equal(type(bool), statictype(3 == 2));
    assert.Equal(type(bool), statictype(b != b));
    assert.Equal(type(bool), statictype(1 < 2));
    assert.Equal(type(bool), statictype(1 > 2));
    assert.Equal(type(bool), statictype(1 <= 2));
    assert.Equal(type(bool), statictype(1 >= 2));

    return 0;
}

class TestClass() 
{
    let int field = 6;
    
    constructor() {}

    function<int> postIncrement()
    {
        let int retVal = field;
        field = field + 1;
        return retVal;
    }
}