import Test.RAssert;

class OperatorTest(int val)
{
    operator<OperatorTest> +(OperatorTest a, OperatorTest b)
    {
        return OperatorTest(a.val + b.val);
    }

    operator<OperatorTest> +(int a, OperatorTest b)
    {
        return OperatorTest(a + b.val);
    }

    operator<OperatorTest> +(OperatorTest a, int b)
    {
        return OperatorTest(a.val + b);
    }

    operator<bool> ==(OperatorTest a, int b)
    {
        return a.val == b;
    }

    operator<bool> ==(OperatorTest a, OperatorTest b)
    {
        return a.val == b.val;
    }

    operator<bool> ==(int a, OperatorTest b)
    {
        return a == b.val;
    }
}

function<int> testMain(RAssert assert)
{
    let OperatorTest a = OperatorTest(6);
    let OperatorTest b = OperatorTest(11);
    assert.False(a == b);
    assert.True(a == a);
    assert.True(b == b);

    assert.True(a == 6);
    assert.True(6 == a);
    assert.False(a == 7);
    assert.False(7 == a);

    assert.Equal(17, (a + b).val);
    assert.Equal(7, (a + 1).val);
    assert.Equal(16, (b + 5).val);
    assert.Equal(7, (1 + a).val);
    assert.Equal(16, (5 + b).val);

    let ? c = OperatorTest(6);
    assert.True(a == c);
    assert.True(c == a);
    assert.False(b == c);
    assert.False(c == b);

    c = 6;
    assert.True(a == c);
    assert.True(c == a);
    assert.False(b == c);
    assert.False(c == b);

    assert.True(null == null);
    assert.False(3 == null);
    assert.False(null == 3);

    assert.False(null != null);
    assert.True(3 != null);
    assert.True(null != 3);

    assert.Equal(4, 2 * 2);
    assert.Equal(6, 2 * 3);
    
    assert.Equal(2, 4 / 2);
    assert.Equal(4, 13 / 3);
    
    assert.Equal(1, 5 % 2);
    assert.Equal(0, 4 % 2);
    assert.Equal(2, 5 % 3);

    assert.Equal(4, 2 + 2);
    assert.Equal(5, 2 + 3);

    assert.Equal(2, 9 - 7);

    assert.Equal(8, 1 << 3);
    assert.Equal(1, 8 >> 3);

    assert.True(1 < 3);
    assert.False(3 < 1);
    assert.False(2 < 2);

    assert.False(1 > 3);
    assert.True(3 > 1);
    assert.False(2 > 2);

    assert.True(1 <= 3);
    assert.False(3 <= 1);
    assert.True(2 <= 2);

    assert.False(1 >= 3);
    assert.True(3 >= 1);
    assert.True(2 >= 2);

    assert.False(1 == 3);
    assert.False(3 == 1);
    assert.True(2 == 2);

    assert.True(1 != 3);
    assert.True(3 != 1);
    assert.False(2 != 2);

    assert.Equal(1, 5 & 3);
    assert.Equal(6, 5 ^ 3);
    assert.Equal(7, 5 | 3);

    let int calledA = 0;
    let int calledB = 0;
    function reset() {
        calledA = 0;
        calledB = 0;
    }

    function<bool> funcA() {
        calledA = calledA + 1;
        return true;
    }

    function<bool> funcB() {
        calledB = calledB + 1;
        return false;
    }

    assert.True(funcA() && funcA());
    assert.Equal(2, calledA);
    reset();

    assert.True(funcA() || funcA());
    assert.Equal(1, calledA);
    reset();

    assert.False(funcA() && funcB());
    assert.Equal(1, calledA);
    assert.Equal(1, calledB);
    reset();

    assert.True(funcB() || funcA());
    assert.Equal(1, calledA);
    assert.Equal(1, calledB);
    reset();

    assert.False(funcB() && funcA());
    assert.Equal(0, calledA);
    assert.Equal(1, calledB);
    reset();

    assert.True(funcA() || funcB());
    assert.Equal(1, calledA);
    assert.Equal(0, calledB);

    return 1;
}